{"version":3,"file":"app.min.js","sources":["../node_modules/domc/index.js","../node_modules/domc/vMap.js","../src/app.js"],"sourcesContent":["\n// Synthetic Events\n\nconst nativeToSyntheticEvent = (event, name) => {\n    const eventKey = `__${name}`\n    let dom = event.target\n    while(dom !== null) {\n        const eventHandler = dom[eventKey]\n        if (eventHandler) {\n            eventHandler(dom[`__${name}Data`])\n            return\n        }\n        dom = dom.parentNode\n    }\n}\nconst CONFIGURED_SYNTHETIC_EVENTS = {}\nfunction setupSyntheticEvent(name) {\n    if (CONFIGURED_SYNTHETIC_EVENTS[name]) return\n    document.addEventListener(name, event => nativeToSyntheticEvent(event, name))\n    CONFIGURED_SYNTHETIC_EVENTS[name] = true\n}\n\n// Core\n//\n// To speed up template compiler:\n// - Reduce amount of fn calls, because every call has cost of allocating memory for new fn context.\n//   Inline as much code as possible ot avoid calls.\n// - Preallocate all variables at once in module context instead of fn arguments.\n//   It reduces time to allocate context memory for functions that needed some arguments for every call.\n//   Use Stack for handling arguments of nested/recursive calls.\n// - String concatenation is faster than arr.join('')\n// - arr[idx] is faster than arr.push, because it's not a function call,\n//   therefore it doesn't need to allocate memory for new fn context\n// - str[idx] and str.slice are faster than regex matching\n//\n\nfunction makeid() {}\nmakeid.possible = \"abcdefghijklmnopqrstuvwxyz\"\nmakeid.counter = 0\n\n\nexport const customDirectives = {}\n\nclass Compiler {\n    constructor() {\n        this.varCode = \n        this.vdomCode = \n        this.compareCode = \n        this.refsCode = \n        this.directiveSetupCode = \n        this.directiveUpdateCode = ''\n\n        this.scopeVars = {}\n    }\n\n    // Inspired by walker: https://gist.github.com/cowboy/958000\n    compile(root) {\n        let skip = false, tmp, pathId = 'node', prevPathId, pahtIdLen, node = root, canIGoDeep\n        this.codegen(node, pathId)\n        pathId = ''\n        do {\n            if (!skip && (tmp = node.firstChild)) {\n                if (tmp.nodeType === 3 && tmp.nodeValue.trim() === \"\") {\n                    tmp.parentNode.removeChild(tmp)\n                    continue\n                }\n                skip = false\n\n                prevPathId = pathId\n                pathId += '_f'\n                this.varCode += `let ${pathId} = ${prevPathId || 'node'}.firstChild;\\n` \n                \n                canIGoDeep = this.codegen(tmp, pathId)\n                if (canIGoDeep > 0) skip = true\n            } else if (tmp = node.nextSibling) {\n                if (tmp.nodeType === 3 && tmp.nodeValue.trim() === \"\") {\n                    tmp.parentNode.removeChild(tmp)\n                    continue\n                }\n                skip = false\n\n                prevPathId = pathId\n                pathId += '_n'\n                this.varCode += `let ${pathId} = ${prevPathId || 'node'}.nextSibling;\\n` \n                \n                canIGoDeep = this.codegen(tmp, pathId)\n                if (canIGoDeep > 0) skip = true\n            } else {\n                pahtIdLen = pathId.length\n                if (pathId[pahtIdLen - 1] === 'n') {\n                    pathId = pathId.slice(0, pathId.lastIndexOf('_f_n'))\n                } else {\n                   pathId = pathId.slice(0, pahtIdLen- 2) \n                }\n                tmp = node.parentNode\n                skip = true\n            }\n            node = tmp\n            if (node === root) break\n        } while (node)\n\n        // this.codeopt()\n    }\n\n    codegen(node, pathId) {\n        const nodeType = node.nodeType\n        \n        if (nodeType !== 3) {\n\n            // codegenAttributes\n            if (node.attributes !== undefined) {\n                for(let attr of node.attributes) {\n                    const aname = attr.name\n                    const avalue = attr.value\n\n                    if (aname[0] === 'v' && aname[1] === '-') {\n                        node.removeAttribute(aname)\n\n                        const directive = aname.slice(2)\n\n                        const vdomId = makeid.possible.charAt(makeid.counter++)\n\n                        this.directiveSetupCode += `node.__${vdomId} = CD.${directive}(${pathId}, \"${avalue}\");\\n`\n                        this.directiveUpdateCode += `node.__${vdomId}(scope);\\n`\n\n                        return 1\n                    }\n\n                    if (aname[0] === 'o' && aname[1] === 'n') {\n\n                        const eventType = aname.slice(2)\n                        setupSyntheticEvent(eventType)\n\n                        if (avalue.indexOf(\"${\") >= 0) {\n                            const reactiveValue = avalue.slice(2, avalue.length - 1)\n                            const parenIdx = reactiveValue.indexOf(\"(\")\n                            \n                            let eventHandler, eventHandlerArgs\n                            if (parenIdx >= 0) {\n                                eventHandler = reactiveValue.slice(0, parenIdx)\n                                const eventHandlerArgsStr = reactiveValue.slice(parenIdx + 1, reactiveValue.length - 1)\n                                if (eventHandlerArgsStr.length > 0) {\n                                    eventHandlerArgs = eventHandlerArgsStr.split(',')\n                                } else {\n                                    eventHandlerArgs = []\n                                }\n                            } else {\n                                eventHandler = reactiveValue\n                                eventHandlerArgs = []\n                            }\n\n                            if (eventHandlerArgs.length > 0) {\n                                const vdomId = makeid.possible.charAt(makeid.counter++)\n                                this.refsCode += `const ${vdomId} = node.__${vdomId} = ${pathId};\\n`\n                                this.refsCode += `${vdomId}.__${eventType} = scope.${eventHandler};\\n`\n                                this.vdomCode += `vdom.${vdomId} = ${eventHandlerArgs};\\n`    \n                                this.compareCode +=`if (current.${vdomId} !== vdom.${vdomId}) node.__${vdomId}.__${eventType}Data = vdom.${vdomId};\\n`\n                            } else {\n                                this.refsCode += `${pathId}.__${eventType} = scope.${eventHandler};\\n`\n                            }\n\n                            node.removeAttribute(aname)\n\n                            for(let i = 0, code, token; i < eventHandlerArgs.length; i++) {\n                                token = eventHandlerArgs[i]\n                                code = token.charCodeAt(0)\n                                if (code >= 97 && code <= 122) {\n                                    if (token.indexOf('.') >= 0) {\n                                        this.scopeVars[token.slice(0, token.indexOf('.'))] = true    \n                                    } else {\n                                        this.scopeVars[token] = true\n                                    }\n                                }\n                            }\n                        }\n\n                    } else if (avalue.indexOf(\"${\") >= 0) {\n                        if (aname === 'class') {\n                            const vdomId = makeid.possible.charAt(makeid.counter++)\n\n                            this.refsCode += `node.__${vdomId} = ${pathId};\\n`\n                            this.vdomCode += `vdom.${vdomId} = ${avalue.slice(2, avalue.length - 1)};\\n`\n                            this.compareCode +=`if (current.${vdomId} !== vdom.${vdomId}) node.__${vdomId}.className = vdom.${vdomId};\\n`\n                        } else {\n                            const vdomId = makeid.possible.charAt(makeid.counter++)\n\n                            this.refsCode += `node.__${vdomId} = ${pathId};\\n`\n                            this.vdomCode += `vdom.${vdomId} = ${avalue.slice(2, avalue.length - 1)};\\n`\n                            this.compareCode +=`if (current.${vdomId} !== vdom.${vdomId}) node.__${vdomId}.setAttribute(\"${aname}\", vdom.${vdomId});\\n`\n                        }\n\n                        const tokens = avalue.slice(2, avalue.length - 1).split(' ')\n                        for(let i = 0, code, token; i < tokens.length; i++) {\n                            token = tokens[i]\n                            code = token.charCodeAt(0)\n                            if (code >= 97 && code <= 122) {\n                                if (token.indexOf('.') >= 0) {\n                                    this.scopeVars[token.slice(0, token.indexOf('.'))] = true    \n                                } else {\n                                    this.scopeVars[token] = true\n                                }\n                            }\n                        }\n\n                        node.removeAttribute(aname)\n                    }   \n                }\n            }\n            // End codegenAttributes\n\n        } else {\n\n            // codegenText\n            const nodeData = node.nodeValue\n            if (nodeData.indexOf(\"${\") >= 0) {\n                const vdomId = makeid.possible.charAt(makeid.counter++)\n\n                this.refsCode += `node.__${vdomId} = ${pathId};\\n`\n                this.vdomCode += `vdom.${vdomId} = ${nodeData.slice(2, nodeData.length - 1)};\\n`\n                this.compareCode +=`if (current.${vdomId} !== vdom.${vdomId}) node.__${vdomId}.nodeValue = vdom.${vdomId};\\n`\n\n                node.nodeValue = \"\"\n\n                const tokens = nodeData.slice(2, nodeData.length - 1).split(' ')\n                for(let i = 0, code, token; i < tokens.length; i++) {\n                    token = tokens[i]\n                    code = token.charCodeAt(0)\n                    if (code >= 97 && code <= 122) {\n                        if (token.indexOf('.') >= 0) {\n                            this.scopeVars[token.slice(0, token.indexOf('.'))] = true    \n                        } else {\n                            this.scopeVars[token] = true\n                        }\n                    }\n                }\n            }\n            // End codegenText\n\n        }\n\n        return 0\n    }\n\n    // codeopt() {\n    //     let varCode = this.varCode,\n    //         refsCode = this.refsCode\n\n    //     if (varCode.length === 0) return\n\n    //     const vars = varCode.match(/_f\\w*/g)\n    //     let i = vars.length, _var\n    //     while(--i) {\n    //         _var = vars[i]\n    //         if (varCode.indexOf(` ${_var}.`) === -1 && refsCode.indexOf(` ${_var};`) === -1) {\n    //             varCode = varCode.replace(new RegExp(`let ${_var} = .*?;\\n`), '')\n    //         }\n    //     }\n\n    //     this.varCode = varCode\n    // }\n\n    createFn() {\n        return Function(\"node\", \"scope\", \"CD\", this.varCode + '\\n' + this.refsCode + '\\n' + this.directiveSetupCode)\n    }\n    updateFn() {\n        let argsStr = ''\n        for(let arg of Object.keys(this.scopeVars)) argsStr += arg + \",\"   \n        return Function(\"scope\", `const node = this;\\n\\n${this.vdomCode.length > 0 ? `const {${argsStr}} = scope;\\nconst current = node.__vdom || {};\\n\\nconst vdom = {};\\n${this.vdomCode}\\n${this.compareCode}\\nnode.__vdom = vdom;\\n` : ''}${this.directiveUpdateCode}`)\n    }\n}\n \nclass Template {\n    constructor(dom, createFn, updateFn) {\n        this.dom = dom\n        this.create = createFn\n        this.update = updateFn\n    }\n    createInstance(scope) {\n        const node = this.dom.cloneNode(true)\n        this.create(node, scope, customDirectives)\n        node.update = this.update\n        node.update(scope)\n        return node\n    }\n    rehydrate(scope) {\n        this.create(this.dom, scope, customDirectives)\n        this.dom.update = this.update\n        this.dom.update(scope)\n    }\n}\n\nexport function domc(dom) {\n    const c = new Compiler()\n    c.compile(dom)\n    // console.debug(c.scopeVars)\n    const createFn = c.createFn()\n    const updateFn = c.updateFn()\n    // console.debug({createFn, updateFn})\n    return new Template(dom, createFn, updateFn)\n}\n\nexport default domc\n","\nimport {customDirectives, domc} from './index.js'\n\nfunction setup(node, directive = \"item of data\") {\n    const parent = node.parentNode\n    parent.textContent = \"\"\n    let nodes = []\n\n    const ofIdx = directive.indexOf(' of ')\n    const dataKey = directive.slice(ofIdx + 4)\n    const itemKey = directive.slice(0, ofIdx)\n\n    const template = domc(node)\n\n    return scope => {\n        const data = scope[dataKey]\n\n        if (data.length === 0) {\n            parent.textContent = \"\"\n            nodes.length = 0\n            return\n        }\n        if (nodes.length > data.length) {\n            for(let i = data.length; i < nodes.length; i++) {\n                parent.removeChild(nodes[i])\n            }\n            nodes.length = data.length\n        }\n\n        const localScope = Object.assign({}, scope)\n        for(let i = 0; i < data.length; i++) {\n            localScope[itemKey] = data[i]\n            if (nodes[i]) {\n                nodes[i].update(localScope)\n            } else {\n                nodes[i] = template.createInstance(localScope)\n                parent.appendChild(nodes[i])\n            }\n        }\n    }\n}\ncustomDirectives.map = setup\n","\nimport domc from 'domc'\nimport '../node_modules/domc/vMap.js'\n\nvar indicatorLine = ''\n\nfor ( var i = 0; i < 100; i++ ) {\n    indicatorLine += '-'\n}\n\nlet did = 1\nconst buildData = (count) => {\n    var adjectives = [\"pretty\", \"large\", \"big\", \"small\", \"tall\", \"short\", \"long\", \"handsome\", \"plain\", \"quaint\", \"clean\", \"elegant\", \"easy\", \"angry\", \"crazy\", \"helpful\", \"mushy\", \"odd\", \"unsightly\", \"adorable\", \"important\", \"inexpensive\", \"cheap\", \"expensive\", \"fancy\"];\n    var colours = [\"red\", \"yellow\", \"blue\", \"green\", \"pink\", \"brown\", \"purple\", \"brown\", \"white\", \"black\", \"orange\"];\n    var nouns = [\"table\", \"chair\", \"house\", \"bbq\", \"desk\", \"car\", \"pony\", \"cookie\", \"sandwich\", \"burger\", \"pizza\", \"mouse\", \"keyboard\"];\n    var data = [];\n    for (var i = 0; i < count; i++) {\n        data.push({\n            id: did++,\n            label: adjectives[_random(adjectives.length)] + \" \" + colours[_random(colours.length)] + \" \" + nouns[_random(nouns.length)],\n            indicator: indicatorLine.substr(0,Math.round(Math.random() * 100))\n        });\n    }\n    return data;\n}\nconst _random = (max) => {\n    return Math.round(Math.random() * 1000) % max;\n}\n\n\n\nconst scope = {\n    add: () => {\n        scope.data = scope.data.concat(buildData(1000))\n        main.update(scope)\n    },\n    run: () => {\n        scope.data = buildData(1000)\n        main.update(scope)\n    },\n    runLots: () => {\n        scope.data = buildData(10000)\n        main.update(scope)\n    },\n    clearData: () => {\n        scope.data = []\n        main.update(scope)\n    },\n    update: () => {\n        const data = scope.data\n        for ( let i=0; i < data.length; i++ ) {\n            data[i].indicator = indicatorLine.substr(0,Math.round(Math.random() * 100))\n        }\n        main.update(scope)\n    },\n    swapRows: () => {\n        const data = scope.data\n        if(data.length > 998) {\n            var tmp = data[1];\n            data[1] = data[998];\n            data[998] = tmp;\n        }\n\n        main.update(scope)\n    },\n    del: item => {\n        const id = item.id\n        const data = scope.data\n        const idx = data.findIndex(d => d.id === id);\n        data.splice(idx, 1)\n        main.update(scope)\n    },\n    select: item => {\n        scope.selected = parseInt(item.id)\n        main.update(scope)\n    },\n    selected: 0,\n    data: [],\n}\n\n\n\nconst main = document.getElementById('main')\nconst app = domc(main)\napp.rehydrate(scope)\n"],"names":["nativeToSyntheticEvent","event","name","eventKey","dom","target","eventHandler","parentNode","CONFIGURED_SYNTHETIC_EVENTS","setupSyntheticEvent","document","addEventListener","makeid","possible","counter","customDirectives","Compiler","[object Object]","this","varCode","vdomCode","compareCode","refsCode","directiveSetupCode","directiveUpdateCode","scopeVars","root","tmp","prevPathId","pahtIdLen","canIGoDeep","skip","pathId","node","codegen","firstChild","nodeType","nodeValue","trim","removeChild","nextSibling","length","slice","lastIndexOf","undefined","attributes","attr","aname","avalue","value","removeAttribute","directive","vdomId","charAt","eventType","indexOf","reactiveValue","parenIdx","eventHandlerArgs","eventHandlerArgsStr","split","code","token","i","charCodeAt","tokens","nodeData","Function","argsStr","arg","Object","keys","Template","createFn","updateFn","create","update","scope","cloneNode","domc","c","compile","map","parent","textContent","nodes","ofIdx","dataKey","itemKey","template","data","localScope","assign","createInstance","appendChild","indicatorLine","did","buildData","count","adjectives","colours","nouns","push","_random","substr","Math","round","random","max","concat","indicator","item","id","idx","findIndex","d","splice","selected","parseInt","main","getElementById","rehydrate"],"mappings":"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"}